{"version":3,"sources":["Components/Form/Form.js","Components/ListItem/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["Form","change","submit","current","className","onSubmit","type","placeholder","onChange","value","ListItem","state","isState","renderCourse","props","course","deleteItem","index","name","onClick","togglestate","handleSubmit","e","preventDefault","update","input","updateList","ref","v","defaultValue","setState","this","Fragment","Component","App","courses","handleChange","target","handleDelete","splice","push","handleUpdate","AllCourses","length","map","key","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a4cf36d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({change, submit, current}) => {\r\n        return (\r\n            <form   className='form-group main-form'\r\n                    onSubmit={submit}>\r\n\r\n                <input  type='text'\r\n                        placeholder='Course Name'\r\n                        className='form-control mr-3'\r\n                        onChange={change}\r\n                        value={current}\r\n                />\r\n                <button className='text-capitalize btn btn-primary mb-1'> add course</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default Form","import React, {Component} from 'react'\r\n\r\nclass ListItem extends Component {\r\n\r\n    state = {\r\n        isState : false\r\n    }\r\n\r\n    renderCourse = () => {\r\n        const {course, deleteItem, index} = this.props;\r\n        return (\r\n            <li className='mb-3'>\r\n                <span className='name text-capitalize'>{course.name}</span>\r\n                <button className='delete btn btn-danger' onClick={()=>deleteItem(index)}>Delete</button>\r\n                <button className='btn btn-success' onClick={this.togglestate}>Edit Course</button>\r\n                \r\n            </li>\r\n        )\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.update(this.props.index, this.input.value )\r\n\r\n        this.togglestate();\r\n    }\r\n\r\n    updateList = () => {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='form-group edit-form'>\r\n                <input type='text'\r\n                className='form-control'\r\n                ref={(v) => {this.input= v}}\r\n                defaultValue={this.props.course.name}\r\n            />\r\n                <button className='btn btn-success update'>Update Course</button>\r\n            </form>\r\n            \r\n        )\r\n    }\r\n\r\n    togglestate = () => {\r\n        let  {isState} = this.state\r\n        this.setState({\r\n            isState : !isState\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    // Main Render\r\n    render() {\r\n        let {isState} = this.state\r\n        return (\r\n            <React.Fragment>\r\n                { isState ? this.updateList() : this.renderCourse()}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListItem","import React, {Component} from 'react';\nimport Form from './Components/Form/Form'\nimport ListItem from './Components/ListItem/ListItem'\n\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    courses :[\n      {name: 'HTML5'},\n      {name: 'CSS3'},\n      {name: 'react'}\n    ],\n    current: ''\n  }\n\n  // Functions\n\n  handleChange = (e) => {\n\n    this.setState({\n      current: e.target.value\n    })\n    \n  } \n\n  handleDelete = (index) => {\n    const {courses} = this.state;\n    courses.splice(index , 1)\n    this.setState({\n      courses\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const {courses, current} = this.state;\n    courses.push({name: current})\n    this.setState({\n      courses,\n      current: ''\n    })\n  }\n\n  handleUpdate = (index, value) => {\n    const {courses} = this.state;\n    const course = courses[index]\n    course['name'] = value\n    this.setState({\n      courses\n    })\n\n  }\n\n  render() {\n    \n    const {courses, current} = this.state;\n    const Length = this.state.courses.length\n    const AllCourses = Length ? (\n      courses.map( (course, index) => {\n        return <ListItem  key={index}\n                          index={index}\n                          course={course}\n                          deleteItem={this.handleDelete}\n                          update={this.handleUpdate}\n                />\n      })\n    ) : (\n        <div className=\"alert alert-danger mt-3\" role=\"alert\">\n          There's no items to show\n        </div>\n    )\n\n    return(\n      <div className='container main'>\n        <h1 className='pt-5 text-center'>Add Courses App</h1>\n        <Form change={this.handleChange}\n              submit={this.handleSubmit}\n              current={current}\n        />\n        <ul>{AllCourses}</ul>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}